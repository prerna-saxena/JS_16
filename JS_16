Property flags and descriptors

objects can store properties.
property was a simple “key-value” pair to us

Property flags
Object properties, besides a value, have three special attributes (so-called “flags”):

writable – if true, the value can be changed, otherwise it’s read-only.
enumerable – if true, then listed in loops, otherwise not listed.
configurable – if true, the property can be deleted and these attributes can be modified, otherwise not.

The method Object.getOwnPropertyDescriptor allows to query the full information about a property.
----------------------------------------------------------------------------------------------------

The syntax is:
let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);

obj :-
The object to get information from.

propertyName :-
The name of the property.
The returned value is a so-called “property descriptor” object: it contains the value and all the flags.

Object.getOwnPropertyDescriptor()
is a method in JavaScript that allows you to retrieve the property descriptor of a specific property
directly on an object.  Let's break down what that means and why it's useful.

To change the flags, we can use Object.defineProperty.

The syntax is:

Object.defineProperty(obj, propertyName, descriptor)

obj, propertyName
The object and its property to apply the descriptor.
descriptor
Property descriptor object to apply.
If the property exists, defineProperty updates its flags.
Otherwise, it creates the property with the given value and flags; in that case,
if a flag is not supplied, it is assumed false.

let user = {};

Object.defineProperty(user, "name", {
  value: "John"
});

let descriptor = Object.getOwnPropertyDescriptor(user, 'name');

alert( JSON.stringify(descriptor, null, 2 ) );
/*
{
  "value": "John",
  "writable": false,
  "enumerable": false,
  "configurable": false
}
 */


Non-writable
Let’s make user.name non-writable (can’t be reassigned) by changing writable flag:

let user = {
  name: "John"
};

Object.defineProperty(user, "name", {
  writable: false
});

user.name = "Pete"; // Error: Cannot assign to read only property 'name'

In JavaScript, a non-enumerable property is a property of an object that will not show up in certain operations that iterate over the object's properties.  Specifically, non-enumerable properties are skipped by:
for...in loops: These loops iterate over the enumerable properties of an object.
Object.keys(): This method returns an array of an object's enumerable property names.


non-enumerable properties are still accessible by their key:

Direct access: You can still access the value of a non-enumerable property directly using its key (e.g., object.propertyName).
Object.getOwnPropertyNames(): This method returns an array of all property names of an object, including non-enumerable ones.
Object.getOwnPropertySymbols(): This method returns an array of all symbol properties of an object, including non-enumerable ones

By default, properties you add to an object are enumerable.  To make a property non-enumerable, you need to define it using Object.defineProperty() and set the enumerable attribute to false.

For instance, Math.PI is non-writable, non-enumerable and non-configurable:

So, a programmer is unable to change the value of Math.PI or overwrite it.

Math.PI = 3; // Error, because it has writable: false
We also can’t change Math.PI to be writable again:

Object.defineProperties
There’s a method Object.defineProperties(obj, descriptors) that allows to define many properties at once.

The syntax is:

Object.defineProperties(obj, {
  prop1: descriptor1,
  prop2: descriptor2
  // ...
});

Object.defineProperties(user, {
  name: { value: "John", writable: false },
  surname: { value: "Smith", writable: false },
  // ...
});

Object.getOwnPropertyDescriptors
To get all property descriptors at once, we can use the method Object.getOwnPropertyDescriptors(obj).

Together with Object.defineProperties it can be used as a “flags-aware” way of cloning an object:

let clone = Object.defineProperties({}, Object.getOwnPropertyDescriptors(obj));
Sealing an object globally
Property descriptors work at the level of individual properties.

There are also methods that limit access to the whole object:

Object.preventExtensions(obj)
Forbids the addition of new properties to the object.
Object.seal(obj)
Forbids adding/removing of properties. Sets configurable: false for all existing properties.
Object.freeze(obj)
Forbids adding/removing/changing of properties. Sets configurable: false, writable: false for all existing properties.






















